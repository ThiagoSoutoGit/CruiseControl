module CruiseControl:

%Inputs
input On; % This input turns the cruise control on
input Off; % This input turns the cruise control off
input Set; % This input sets the current speed as the cruising speed
input Resume; % This input resumes the cruising speed after it was interrupted by braking or accelerating
input QAccel; % This input causes the cruising speed to quickly increase
input QDecel; % This input causes the cruising speed to quickly decrease
input Accel : float; % This input represents the current acceleration
input Brake : float; % This input represents the current brake force
input Speed : float; % This input represents the current speed

%Outputs
output CruiseSpeed : float; % This output is the current cruising speed
output ThrottleCmd : float; % This output is the command to the throttle
output CruiseState : integer; % This output represents the current state of the cruise control: 0 = OFF, 1 = ON, 2 = STANDBY, 3 = DISABLE

%Internal Signals
signal SpeedLimit in % This internal signal is emitted if the speed is within the predefined speed limits
signal AccelPressed in % This internal signal is emitted if the accelerator is being pressed
signal BrakePressed in % This internal signal is emitted if the brake is being pressed

run VehicleStatusCheck [ % This module checks brakes, speed and acceleration
	signal Speed/Speed;
	signal SpeedLimit/SpeedLimit;
    signal Brake/Brake;
    signal BrakePressed/BrakePressed;
    signal Accel/Accel;
    signal AccelPressed/AccelPressed
]
||
run CruiseSpeedController [ % This module controls the cruising speed based on inputs
    signal CruiseState/CruiseState;
    signal QAccel/QAccel;
    signal QDecel/QDecel;
    signal Set/Set;
    signal Speed/Speed;
    signal CruiseSpeed/CruiseSpeed
]
||
run ThrottleController [ % This module controls the throttle based on the current cruise state and speed
    signal CruiseState/CruiseState;
    signal CruiseSpeed/CruiseSpeed;
    signal Accel/Accel;
    signal Speed/Speed
]
||
run CruiseStateController [ % This module controls the state of the cruise control based on inputs
    signal On/On;
    signal Off/Off;
    signal Resume/Resume;
    signal AccelPressed/AccelPressed;
    signal BrakePressed/BrakePressed;
    signal SpeedLimit/SpeedLimit
]
end signal;
end signal;
end signal;
end module


%Module to determine Cruise Controller State
module CruiseStateController:

%Inputs
input On;
input Off;
input Resume;
input AccelPressed;
input BrakePressed;
input SpeedLimit;

%Outputs
output CruiseState : integer; % 1 = OFF; 2 = ON; 3 = STDBY; 4 = DISABLE;

var state := 1 : integer in
loop
    emit CruiseState(state);
    await tick;
    if state = 1 then
        present (On and not(Off) and SpeedLimit) then
            state := 2;            
        end present;

    elsif state = 2 then
        present (Off) then
            state := 1;
        end present;
        present (BrakePressed and not(Off)) then
            state := 3;
        end present;
        present ((AccelPressed or not(SpeedLimit)) and not(Off) and not(BrakePressed)) then
            state := 4;
        end present;

    elsif state = 3 then
        present (Off) then
            state := 1;
        end present;
        present (Resume and SpeedLimit and not(BrakePressed) and not(AccelPressed) and not(Off)) then
            state := 2;
        end present;
        present (Resume and SpeedLimit and not(BrakePressed) and AccelPressed and not(Off)) then
            state := 4;
        end present;

    elsif state = 4 then
        present (Off) then
            state := 1;
        end present;
        present (not(AccelPressed) and SpeedLimit and not(Off)) then
            state := 2;
        end present;
    end if;

end loop;
end var;
end module


%Module to determine cruise speed
module CruiseSpeedController:

%Inputs
input CruiseState : integer;
input QAccel;
input QDecel;
input Set;
input Speed : float;

%Outputs
output CruiseSpeed : float;

constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant SpeedInc = 2.5f : float;

var CurrentSpeed := 0.0f : float in
loop
    emit CruiseSpeed(CurrentSpeed);
    await tick;
    
    if (?CruiseState  = 1) then
        CurrentSpeed := 0.0f;
    else
        if (?CruiseState = 2 and pre(?CruiseState) = 1) then
            CurrentSpeed := ?Speed;
        end if;        
        present (Set) then
            CurrentSpeed := ?Speed;
        end present;
        present (QDecel and not(Set)) then
            if (CurrentSpeed - SpeedInc > SpeedMin) then
                CurrentSpeed := CurrentSpeed - SpeedInc;
            else
                CurrentSpeed := SpeedMin;
            end if;
        end present;
        present (QAccel and not(Set)) then
            if (CurrentSpeed + SpeedInc < SpeedMax) then
                CurrentSpeed := CurrentSpeed + SpeedInc;
            else
                CurrentSpeed := SpeedMax;
            end if;
        end present;
    end if;

end loop;
end var;
end module


%Module to regulate throttle based on output from C functions
module ThrottleController:
%Inputs
input CruiseState : integer;
input CruiseSpeed : float;
input Accel : float;
input Speed : float;

output ThrottleCmd : float;

function regulateThrottle(boolean, float, float) : float;

loop
    await tick;
    if (?CruiseState = 2 and pre(?CruiseState) = 1) then
        %CruiseControl is going from OFF to ON
        emit ThrottleCmd(regulateThrottle(true, ?CruiseSpeed, ?Speed))
    elsif (?CruiseState = 2) then
        %CruiseControl is ON
        emit ThrottleCmd(regulateThrottle(false , ?CruiseSpeed, ?Speed))
    else
        %CruiseControl is not ON
        emit ThrottleCmd(?Accel)

    end if;
end loop;
end module

%Module to check if speed is within limits, brake is pressed, and accelerator is pressed
module VehicleStatusCheck:

%Inputs
input Speed: float;
input Accel: float;
input Brake: float;

%Outputs
output SpeedLimit;
output AccelPressed;
output BrakePressed;

% Constants for speed limit and pedal press minimum
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant PedalMin = 3.0f : float;

loop
	await tick;

	% Check if speed is within the limits
	if ((?Speed < SpeedMax) and (?Speed > SpeedMin)) then
		emit SpeedLimit;
	end if;

	% Check if brake is being pressed
	if (?Brake > PedalMin) then
		emit BrakePressed;
	end if;

	% Check if accelerator is being pressed
	if (?Accel > PedalMin) then
		emit AccelPressed;
	end if;
end loop
end module


